{"version":3,"file":"static/js/147.57456d49.chunk.js","mappings":"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","sources":["components/Card.js","components/Monster.js"],"sourcesContent":["import React from \"react\";\r\nimport isDev from \"../isDev\";\r\nimport { LazyLoadImage } from \"react-lazy-load-image-component\";\r\nimport \"react-lazy-load-image-component/src/effects/blur.css\";\r\nimport starIconNoAwake from \"../assets/img/stars/star-unawakened.png\";\r\nimport starIconAwake from \"../assets/img/stars/star-awakened.png\";\r\nimport starIcon2Awake from \"../assets/img/stars/star-awakened2.png\";\r\n\r\nconst srcMap = [starIconNoAwake, starIconAwake, starIcon2Awake];\r\nconst altMap = [\"star-unawakened\", \"star-awakened\", \"star-unawakened2\"];\r\n\r\nconst Card = ({ monster }) => {\r\n  const imgApi = `${\r\n    isDev ? \"http://localhost:5000/images/monsters/\" : \"/images/monsters/\"\r\n  }${monster.image_filename}`;\r\n  const starsIcon = Array.from({ length: monster.base_stars }).map(() => (\r\n    <img\r\n      key={Math.random() * monster.id}\r\n      src={srcMap[monster.awaken_level]}\r\n      alt={altMap[monster.awaken_level]}\r\n    />\r\n  ));\r\n\r\n  return (\r\n    <li className=\"card\">\r\n      <LazyLoadImage\r\n        src={imgApi}\r\n        alt={monster.name}\r\n        height={80}\r\n        width={80}\r\n        effect=\"blur\"\r\n      />\r\n\r\n      <div className=\"infos\">\r\n        <h2>{monster.name}</h2>\r\n        <div className=\"stars\">{starsIcon}</div>\r\n        <p>{monster.archetype}</p>\r\n      </div>\r\n    </li>\r\n  );\r\n};\r\n\r\nexport default Card;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport { Button, Input, Progress } from \"semantic-ui-react\";\r\nimport Card from \"./Card\";\r\nimport isDev from \"../isDev\";\r\nimport ricaLoading from \"../assets/img/loading/ricaLoader.gif\";\r\nimport lushenLoading from \"../assets/img/loading/lushenLoader.gif\";\r\nimport endLoading from \"../assets/img/loading/endLoading.gif\";\r\nimport startLoading from \"../assets/img/loading/startLoading.gif\";\r\n\r\nfunction Monster() {\r\n  const [monsters, setMonsters] = useState([]);\r\n  const [error, setError] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [progress, setProgress] = useState(0);\r\n  const [rangeValue, setRangeValue] = useState(100);\r\n  const [selectedRadio, setSelectedValue] = useState(\"\");\r\n  const [inputSearch, setInputSearch] = useState(\"\");\r\n  const radio = [\"Fire\", \"Water\", \"Wind\", \"Dark\", \"Light\"];\r\n\r\n  useEffect(() => {\r\n    const fetchMonsters = async () => {\r\n      // Vérifie si les données sont déjà présentes dans le cache\r\n      const cachedMonsters = localStorage.getItem(\"monsters\");\r\n      if (cachedMonsters) {\r\n        // Si oui, utilise les données du cache\r\n        const filtredCachedMonsters = JSON.parse(cachedMonsters).filter(\r\n          (monster) => {\r\n            return monster.obtainable;\r\n          }\r\n        );\r\n        setMonsters(filtredCachedMonsters);\r\n        setLoading(false);\r\n        return;\r\n      }\r\n\r\n      let allMonsters = [];\r\n      let nextPage = `/monsters`;\r\n\r\n      while (nextPage) {\r\n        try {\r\n          const res = await axios.get(nextPage);\r\n          if (res.data.results) {\r\n            allMonsters = allMonsters.concat(res.data.results);\r\n            setProgress(\r\n              Math.round((allMonsters.length / res.data.count) * 100)\r\n            );\r\n          }\r\n          if (res.data.next) {\r\n            // Extract page number from next URL\r\n            const page = res.data.next.match(/page=(\\d+)/)[1];\r\n            // Reconstruct next URL using base URL of server and route\r\n            nextPage = `/monsters/page/${page}`;\r\n          } else {\r\n            nextPage = null;\r\n          }\r\n        } catch (err) {\r\n          console.error(err);\r\n          let errorMessage =\r\n            \"Une erreur s'est produite lors de la récupération des monstres\";\r\n          if (err.response) {\r\n            errorMessage += `: ${err.response.status}`;\r\n            if (err.response.data && err.response.data.error) {\r\n              errorMessage += ` - ${err.response.data.error}`;\r\n            }\r\n          }\r\n          setError(new Error(errorMessage));\r\n          setLoading(false);\r\n          return;\r\n        }\r\n      }\r\n\r\n      const filteredMonsters = allMonsters.filter((monster) => {\r\n        return monster.obtainable;\r\n      });\r\n      setLoading(false);\r\n      setMonsters(filteredMonsters);\r\n      console.log(isDev ? \"Development\" : \"Production\");\r\n      !isDev && localStorage.setItem(\"monsters\", JSON.stringify(allMonsters));\r\n    };\r\n    fetchMonsters();\r\n  }, []);\r\n\r\n  if (loading) {\r\n    const switchImg = () => {\r\n      let className = \"image\";\r\n      if (progress > 0 && progress <= 25) {\r\n        className += \" show\";\r\n        return <img src={startLoading} alt=\"loading\" className={className} />;\r\n      } else if (progress > 25 && progress <= 50) {\r\n        className += \" show\";\r\n        return <img src={ricaLoading} alt=\"loading\" className={className} />;\r\n      } else if (progress > 50 && progress <= 75) {\r\n        className += \" show\";\r\n        return <img src={lushenLoading} alt=\"loading\" className={className} />;\r\n      } else if (progress > 75 && progress <= 100) {\r\n        className += \" show\";\r\n        return <img src={endLoading} alt=\"loading\" className={className} />;\r\n      } else {\r\n        return;\r\n      }\r\n    };\r\n\r\n    return (\r\n      <div className=\"loading\">\r\n        {switchImg()}\r\n        <Progress percent={progress} indicating>\r\n          <h2>\r\n            Chargement des monstres en cours:\r\n            <p>{progress} %</p>\r\n          </h2>\r\n        </Progress>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (error) {\r\n    return (\r\n      <div>\r\n        <p>Error: {error.message}</p>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  const uniqueMonsters = Array.from(\r\n    new Set(monsters.map((monster) => monster.name))\r\n  );\r\n  const suggestions = uniqueMonsters.map((monsterName) => {\r\n    return { title: monsterName };\r\n  });\r\n  const changeColorButton = () => {\r\n    switch (selectedRadio) {\r\n      case \"Fire\":\r\n        return \"orange\";\r\n      case \"Water\":\r\n        return \"blue\";\r\n      case \"Wind\":\r\n        return \"yellow\";\r\n      case \"Dark\":\r\n        return \"purple\";\r\n      case \"Light\":\r\n        return \"\";\r\n      default:\r\n        return \"\";\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"monsters\">\r\n      <ul className=\"radio-container\">\r\n        {/* Input Text Selection */}\r\n        <li>\r\n          <Input\r\n            id=\"monster-search\"\r\n            list=\"monsters\"\r\n            placeholder=\"Rechercher un monstre...\"\r\n            defaultValue={inputSearch}\r\n            onChange={(e) => {\r\n              setInputSearch(e.target.value);\r\n            }}\r\n          />\r\n          <datalist id=\"monsters\">\r\n            {suggestions.map((suggestion, index) => (\r\n              <option\r\n                key={`${index}: ${suggestion.title}`}\r\n                value={suggestion.title}\r\n              />\r\n            ))}\r\n          </datalist>\r\n        </li>\r\n\r\n        <li>\r\n          {/* Range Selection */}\r\n          <label htmlFor=\"rangeSelect\" className=\"labelRange\">\r\n            Monstres affiché(s):\r\n            {\r\n              monsters\r\n                .filter(\r\n                  (monster) =>\r\n                    monster.element.includes(selectedRadio) &&\r\n                    monster.name.includes(inputSearch)\r\n                )\r\n                .slice(0, rangeValue).length\r\n            }\r\n          </label>\r\n          <br />\r\n          <input\r\n            name=\"rangeSelect\"\r\n            type=\"range\"\r\n            min=\"1\"\r\n            max={monsters.length}\r\n            step=\"1\"\r\n            maxLength=\"200\"\r\n            defaultValue={rangeValue}\r\n            onChange={(e) => {\r\n              setRangeValue(e.target.value);\r\n            }}\r\n          />\r\n        </li>\r\n        {/* Radio Selection */}\r\n        {radio.map((element, i) => (\r\n          <li key={i}>\r\n            <input\r\n              type=\"radio\"\r\n              id={element}\r\n              name=\"elementRadio\"\r\n              checked={selectedRadio === element}\r\n              onChange={(e) => {\r\n                setSelectedValue(e.target.id);\r\n              }}\r\n            />\r\n            <label htmlFor={element}>{element}</label>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n      <div className=\"buttonAnnuler\">\r\n        {selectedRadio && (\r\n          <Button\r\n            compact\r\n            inverted\r\n            color={changeColorButton()}\r\n            onClick={() => {\r\n              setSelectedValue(\"\");\r\n            }}\r\n          >\r\n            Annuler la recherche\r\n          </Button>\r\n        )}\r\n      </div>\r\n\r\n      <ul className=\"monster-render\">\r\n        {monsters.length > 0 ? (\r\n          monsters\r\n            .filter(\r\n              (monster) =>\r\n                monster.element.includes(selectedRadio) &&\r\n                monster.name.includes(inputSearch)\r\n            )\r\n            .slice(0, rangeValue)\r\n            .map((monster) => <Card key={monster.id} monster={monster} />)\r\n        ) : (\r\n          <p>No monsters found</p>\r\n        )}\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Monster;\r\n"],"names":["srcMap","altMap","monster","imgApi","image_filename","starsIcon","Array","from","length","base_stars","map","src","awaken_level","alt","Math","random","id","className","LazyLoadImage","name","height","width","effect","archetype","useState","monsters","setMonsters","error","setError","loading","setLoading","progress","setProgress","rangeValue","setRangeValue","selectedRadio","setSelectedValue","inputSearch","setInputSearch","useEffect","fetchMonsters","cachedMonsters","localStorage","getItem","filtredCachedMonsters","JSON","parse","filter","obtainable","allMonsters","nextPage","axios","res","data","results","concat","round","count","next","page","match","console","errorMessage","response","status","Error","filteredMonsters","log","setItem","stringify","startLoading","ricaLoading","lushenLoading","endLoading","switchImg","Progress","percent","indicating","message","suggestions","Set","monsterName","title","Input","list","placeholder","defaultValue","onChange","e","target","value","suggestion","index","htmlFor","element","includes","slice","type","min","max","step","maxLength","i","checked","Button","compact","inverted","color","changeColorButton","onClick"],"sourceRoot":""}